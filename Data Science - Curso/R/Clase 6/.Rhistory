}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")}
#Hacer ejercicio para saber si un numero es par o impar
num = scan()
num = scan(?)
#Hacer ejercicio para saber si un numero es par o impar
num = scan(nmax=1)
if (scan%%2==0){
print("Numero par")
}else{
print("Numero impar")}
if (num%%2==0){
print("Numero par")
}else{
print("Numero impar")}
num = scan(nmax=1)
if (num%%2==0){
print("Numero par")
}else{
print("Numero impar")}
#Hacer ejercicio para saber si un numero es par o impar
num = scan(nmax=1)
if (num%%2==0){
print("Numero par")
}else{
print("Numero impar")}
x <- c(0.32,0.36,0.24,0.11,0.11,0.44,2.79,2.99,3.47,0.23,0.55,3.21,4.02,0.23)
sort(x)
Fn
x <- c(0.32,0.36,0.24,0.11,0.11,0.44,2.79,2.99,3.47,0.23,0.55,3.21,4.02,0.23)
sort(x)
Fn = ecdf(x)
Fn
Fn(1)
median(x)
quantile(x,probs=0.27)
quantile(x,probs=0.8)
if(4 > 3) {
"Verdadero"
} else {
"Falso"
if(4 > 3) {
print("Verdadero")
} else {
print("Falso")
}
if(4 > 3) {
print("Verdadero")
} else {
print("Falso")
}
# Ejemplo 2: Si se cumple la condiciÃ³n, se muestra "Verdadero"
if(4 > 3) {
print("Verdadero")
} else {
print("Falso")
}
print("Verdadero")
if(x>0) {
"el nÃºmero, es positivo"
} else if (x<0) {
"el nÃºmero, es negativo"
} else {
"el nÃºmero, es nulo"
}
x <- 5 # al objeto x le asigno el valor 5
if(x>0) {
"el nÃºmero, es positivo"
} else if (x<0) {
"el nÃºmero, es negativo"
} else {
"el nÃºmero, es nulo"
}
numero = 10
if (numero %% 2 == 0){
print("El numero es par") # me devuelve el mensaje
}else{
print("El numero es impar") # me devuelve el mensaje
}
print("Hola")
numero = 121
if (numero %% 2 == 0){
print("El numero es par") # me devuelve el mensaje
}else{
print("El numero es impar") # me devuelve el mensaje
}
numero = 10
if (numero %% 2 == 0){
print("El numero es par") # me devuelve el mensaje
}else{
print("El numero es impar") # me devuelve el mensaje
}
if(4 > 3) {
print("Verdadero")
} else {
print("Falso")
}
promedio <- function(x){mean(x)}
promedio(c(6,7,8,9,8))
resultado <- function(num){
if(num%%2==0){
print("El numero ",num," es par")
}else{
print("El numero ",num," es impar")
}
}
resultado(10)
resultado <- function(num){
if(num%%2==0){
print(paste("El numero ",num," es par"))
}else{
print(paste("El numero ",num," es impar"))
}
}
resultado(10)
promedio <- function(calificaciones) {
media <- mean(calificaciones)
texto <- paste0("CalificaciÃ³n: ", media, ", ")
if(media >= 6) {
print(paste0(texto, "aprobado"))
} else {
print(paste0(texto, "reprobado"))
}
}
promedio(c(6, 7, 8, 9, 8))
dado <- 1:6
for(cara in dado) {
dado ^ 2
dado <- 1:6
for(cara in dado) {
dado ^ 2
}
dado <- 1:6
for(cara in dado) {
dado ^ 2
}
dado <- 1:6
for(cara in dado) {
print(dado ^ 2)
}
dado <- 1:6
for(cara in dado) {
sqrtdado <- dado ^ 2
}
print(sqrtdado)
valor <-  0
mi_vector <- NULL
repeat{
valor <- valor + 1
if(valor == 5) {
break
}
}
valor
valor <-  0
mi_vector <- NULL
repeat{
valor <- valor + 1
print(valor)
if(valor == 5) {
break
}
}
valor
fh1 <- as.Date("1914/07/28",format="%y/%m/%d")
fh1
fh1 <- as.Date("1914/07/28")
fh1
fh2 <- ad.Date("1918/11/11")
as.character(fh1,format="%A")
as.character(fh2,format="%A")
fh2 <- ad.Date("1918/11/11")
as.character(fh2,format="%A")
fh2 <- ad.Date("1918/11/11")
fh1 <- as.Date("1914/07/28")
fh2 <- as.Date("1918/11/11")
as.character(fh1,format="%A")
as.character(fh2,format="%A")
difftime(fh2,fh1,units = "days")
difftime(fh2,fh1,units="weeks")
birth <- as.Date("1992-10-05")
actual <- Sys.Date()
Edad_calc <- actual - birth
Edad_calc
Edad_calc <-difftime(actual,birth,units="days")/365
Edad_calc
library(ggplot)
library(ggplot2)
?hist
data()
#Histogramas. hist()
data("ToothGrowth")
str(ToothGrowth)
#Histogramas. hist()
data("ToothGrowth")?
str(ToothGrowth)
View(ToothGrowth)
names(ToothGrowth)
names(ToothGrowth$supp)
length(ToothGrowth$supp)
len(ToothGrowth)
str(ToothGrowth&supp)
summary(ToothGrowth&supp)
summary(ToothGrowth)
describe(ToothGrowth)
class(ToothGrowth&supp)
class(ToothGrowth)
hist(ToothGrowth$len)
hist(ToothGrowth$len,
breaks=20)
hist(ToothGrowth$len,
breaks=2)
hist(ToothGrowth$len,
breaks=10,
freq=F)
hist(ToothGrowth$len,
breaks=15,
freq=T)
hist(ToothGrowth$len,
breaks=15,
freq=T,
col="blue")
hist(ToothGrowth$len,
breaks=15,
freq=T,
col="#000000")
hist(ToothGrowth$len,
breaks=15,
freq=T,
col="#FFFFFF")
hist(ToothGrowth$len,
breaks=15,
freq=T,
col="#306E82")
hist(ToothGrowth$len,
breaks=15,
freq=T,
col="#306E92")
hist(ToothGrowth$len,
breaks=15,
freq=T,
col="#308E62")
hist(ToothGrowth$len,
breaks=15,
freq=T,
col="#308E62",
border='white')
hist(ToothGrowth$len,
breaks=15,
freq=T,
col="#308E62",
border='orange')
hist(ToothGrowth$len,
breaks=15,
freq=T,
col="#308E62",
border='orange',
main="Histograma de crecimiento de dientes")
#ggplot(x) nos permite crear un "lienzo en blanco" donde se irá armando la imagen
library(ggplot2)
rm(ToothGrowth)
data(iris)
str(iris)
levels(iris$Species)
View(iris)
view(iris$Species)
View(iris$Species)
ggplot(iris)
a<-ggplot(iris)
a+geom_histogram(aes(Sepal.Length))
a+geom_histogram(aes(Sepal.Length),
binwidth=0.5)
a+geom_histogram(aes(Sepal.Length),
binwidth=0.1)
a+geom_histogram(aes(Sepal.Length),
Species=colors(),
binwidth=0.1)
a+geom_histogram(aes(Sepal.Length),
colors()=Species,
binwidth=0.1)
a+geom_histogram(aes(Sepal.Length),
colors=Species,
binwidth=0.1)
a+geom_histogram(aes(Sepal.Length),
color=Species,
binwidth=0.1)
geom_histogram()?
a+geom_histogram(aes(Sepal.Length),
color=Species,
binwidth=0.1)?
a+geom_histogram(aes(Sepal.Length),
col=Species,
binwidth=0.1)?
a+geom_bar(aes(Species))
a<-ggplot(iris)
a+geom_histogram(aes(Sepal.Length),
binwidth=0.1)
a+geom_bar(aes(Species))
a+geom_point(aes(Sepal.Length,Sepal.Length))
a+geom_point(aes(Sepal.Length,Sepal.Width))
a+geom_bar(aes(Species,Petal.Length))
a+geom_bar(aes(Species,Petal.Length),stat='identity')
View(iris)
a+geom_boxplot(aes(Species,Petal.Length))
a+geom_point(aes(Sepal.Length,Sepal.Width,color=Species))
a+geom_point(aes(Petal.Length,Petal.Width,color=Species))
a+geom_point(aes(Petal.Length,Petal.Width,fill=Species))
a+geom_point(aes(Petal.Length,Petal.Width,shape=Species))
a+geom_point(aes(Petal.Length,Petal.Width,
shape=Species,
color=Species))
a+geom_point(aes(Petal.Length,Petal.Width,
shape=Species,
color=Species))+
scale_color_manual(values=c('red','yellow','purple'))
a+geom_point(aes(Petal.Length,Petal.Width))+
scale_color_manual(values=c('red','yellow','purple'))
a+geom_point(aes(Petal.Length,Petal.Width))+scale_color_manual(values=c('red','yellow','purple'))
a+geom_point(aes(Petal.Length,Petal.Width,
color=Species))+
scale_color_manual(values=c('red','yellow','purple'))
a+geom_point(aes(Petal.Length,Petal.Width,
color=Species,
size=Species))+
scale_color_manual(values=c('red','yellow','purple'))
a+geom_point(aes(Petal.Length,Petal.Width,
color=Species))+
scale_color_manual(values=c('red','yellow','purple'))
a+geom_point(aes(Petal.Length,Petal.Width,
color=Species))+
scale_color_manual(values=c('red','gray','purple'))
a+geom_point(aes(Petal.Length,Petal.Width,
color=Species))+
scale_color_manual(values=c('red','gray','purple'))+
scale_shape_manual(values=c(19,6,8))
a+geom_point(aes(Petal.Length,Petal.Width,
color=Species,
shape=Species))+
scale_color_manual(values=c('red','gray','purple'))+
scale_shape_manual(values=c(19,6,8))
a+geom_point(aes(Petal.Length,Petal.Width,
color=Species,
shape=Species))+
scale_color_manual(values=c('red','orange','purple'))+
scale_shape_manual(values=c(19,6,8))
?geom_point
a+geom_point(aes(Petal.Length,Petal.Width,
color=Species,
shape=Species))+
scale_color_manual(values=c('red','orange','purple'))+
scale_shape_manual(values=c(19))
boxplot(iris$Petal.Length ~ iris$Species)
?boxplot
cafe <- c(510,492,494,498,492,496,502,491,507,496)
#-------------------------------------------------------------------------#
###########################################################################
###########################################################################
######################## PRACTICA #########################################
###########################################################################
#Ejercicio: queremos verigicar el proceso de llenado de bolsas de cafe con 500 gramos
#con un nivel de significa del 5%.
cafe <- c(510,492,494,498,492,496,502,491,507,496)
#H0: mu=500gr
#H1: mu!=500gr
t.test(cafe,alternative='two.sided',conf.level = 0.95,mu=500)
#Ejercicio con "estudiantes2.xlsx"
estudiantes <- read_excel("estudiantes2.xlsx")
#Ejercicio con "estudiantes2.xlsx"
library(tidyverse)
estudiantes <- read_excel("estudiantes2.xlsx")
library(readxl)
estudiantes <- read_excel("estudiantes2.xlsx")
setwd("D:/DataScience/Data Science - Curso/R/Clase 6")
estudiantes <- read_excel("estudiantes2.xlsx")
estudiantes <- read_excel("estudiantes2.xlsx")
hist(estudiantes$edad)
lines(estudiantes$edad)
lines(density(estudiantes$edad))
hist(estudiantes$edad)
lines(density(estudiantes$edad))
hist(estudiantes$edad,freq=F)
lines(density(estudiantes$edad))
str(estudiantes$edad)
View(estudiantes)
shapiro.test(estudiantes$edad)
shapiro.test(cafe)
hist(cafe)
#Ejercicio Dataframe "estudiantes.csv"
students <-read.csv2("estudiantes.csv",header=T,
sep=",",dec=".")
View(students)
datos2a35 <-students[2:35,]
nrow(datos2a35)
dim(datos2a35)
str(datos2a35)
names(datos2a35)
View(students)
p3 <-as.numeric(datos2a35$P3)
p3
xbarra <-mean(p3)
xbarra
v <-var(p3)
v
s <-sd(p3)
s
?t.test
t.test(p3,alternative = "two.sided",
mu=xbarra,conf.level = 0.95)
range(p3)
summary(datos2a35)
hist(p3)
ks.test(p3)
?ks.test
ks.test(p3,y=null)
shapiro.test(p3)
length(p3)
#tamaño de la muestra n=34
#Distribución normal
#Grado de confianza 0.95
#Poblacion clasificacion del tercer parcial
#Tipo de prueba bilateral
#Parametro media
#H0: u=x
#H1: u!=x
#la población es >30 y tiene distribucion normal.
#se calcula z= (x-u)/(s/n^0.5)
mu<-3.5
media<-xbarra
n <- length(p3)
ES <- s/sqrt(n)
z <- (xbarra-mu)/
z <- (xbarra-mu)/ES
z
#tamaño de la muestra n=34
#Distribución normal
#Grado de confianza 0.95
#Poblacion clasificacion del tercer parcial
#Tipo de prueba bilateral
#Parametro media
#H0: u=x
#H1: u!=x
#la población es >30 y tiene distribucion normal.
#se calcula z= (x-u)/(s/n^0.5)
mu<-3.5
media<-xbarra
n <- length(p3)
ES <- s/sqrt(n)
z <- (xbarra-mu)/ES
z
rcriticader <- (-z*(0.05/2))
rcriticader
alfa <- 0.05
critico <- qnorm(1-(alfa/2))
critico
?qnorm
critico <- qnorm(1-(alfa))
critico
critico <- qnorm(1-(alfa/2))
critico
#Ejercicio de compañias de automoviles
#H0: u>=20000km/año
#H1: u<20000km/año
xbarra<-19500
s<-3900
n<-100
mu<-20000
est<-(xbarra-mu)/(s/sqrt(n))
alfa<-0.03
est
pnorm(critico)
pnorm(z)
pnorm(est)
