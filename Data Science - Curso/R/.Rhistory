1+1
1+1
2*2
2**2
3*2
3**2
4/2
8/3
8//3
8%3
8-11
x = 1+1
z
install.packages("UsingR")
x = read.table(file='dataset.csv',dec='.',sep = ',',header = TRUE)
x = read.table(file='./dataset.csv',dec='.',sep = ',',header = TRUE)
GETCWD
getcwd
x = read.table(file='/dataset.csv',dec='.',sep = ',',header = TRUE)
#x = read.table(file='dataset.csv',dec='.',sep = ',',header = TRUE)
x = read.table(file='dataset.csv',sep = ',',header = TRUE)
#x = read.table(file='dataset.csv',dec='.',sep = ',',header = TRUE)
x = read.table(file='dataset.csv')
#x = read.table(file='dataset.csv',dec='.',sep = ',',header = TRUE)
x = read.table(file='D:\Data Science - Curso\R\Clase 3\dataset.csv')
#x = read.table(file='dataset.csv',dec='.',sep = ',',header = TRUE)
x = read.table(file='D:/Data Science - Curso/R/Clase 3/dataset.csv')
#x = read.table(file='dataset.csv',dec='.',sep = ',',header = TRUE)
x = read.table(file='D:/Data Science - Curso/R/Clase 3/dataset.csv',,dec='.',sep = ',',header = TRUE)
View(x)
x
datos
datos = c(12.3,15.4,3,5,6,7)
datos[0]
datos[1]
datos[2]
datos[1],datos[2]
datos[1]+datos[2]
datos[2:5]
#datos[2:5]
datos<=7
datos[c(2,4:6)]
datos[datos>5]
datos[datos>7 & datos<15.4]
nuevo_vector = datos[datos>5]
nuevo_vector
ggsave('figures/fig1.png',p)
#p = ggplot(df,aes(x=x)) + geom_histogram()
#ggsave('figures/fig1.png',p)
df
x = read.table(file='D:/Data Science - Curso/R/Clase 3/bitcoin.csv',dec='.',sep = ',',header = TRUE)
ggsave('figures/fig1.png',p)
install.packages("ggplot2")
ggsave('D:/Data Science - Curso/R/Clase 3/figures/fig1.png',p)
library(dataset)
library(datasets)
help(airquality)
attach(airquality)
Ozone
Ozone[1:5]
Ozone[100]
c(Ozone[1:5],Ozone[100])
c(Ozone[1:5],,Ozone[100])
c(Ozone[1:5], ,Ozone[100])
c(Ozone[1:5],;,Ozone[100])
c(Ozone[1:5],texto,Ozone[100])
c(Ozone[1:5],'text',Ozone[100])
c(Ozone[1:5],Ozone[100])
#Para buscar entre los datos aquellos que cumplen una condicion
which(Month==5)
Ozone[which(Month==5)]
#Para contar la cantidad usamos length
length(which(Month==5))
x
y
table(Month)
table(Month)
#table(Month)
#Para contar la cantidad usamos length
length(which(Month==5))#table(Month)
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
#Para contar la cantidad usamos length
length(which(Month==5))#table(Month)
#
# #Para mostrar varios datos
# c(Ozone[1:5],Ozone[100])
#
#
# #Para buscar entre los datos aquellos que cumplen una condicion
# which(Month==5)
# Ozone[which(Month==5)]
#
#
# #Para contar la cantidad usamos length
# length(which(Month==5))#table(Month)
#Para mostrar varios datos
c(Ozone[1:5],Ozone[100])
x
y
x
X
#Hacer ejercicio para saber si un numero es par o impar
scan()
if (scan%%2==0){
print("Numero par")
}
else {
print("Numero impar")
}
num <- scan()
print("Numero par")
}
else {
print("Numero impar")}
num <- scan()
print("Numero par")
}else {
print("Numero impar")}
if (scan%%2==0){
print("Numero par")
}else {
print("Numero impar")
}
11
num = scan()
print("Numero par")
}else {
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")}
#Hacer ejercicio para saber si un numero es par o impar
num = scan()
num = scan(?)
#Hacer ejercicio para saber si un numero es par o impar
num = scan(nmax=1)
if (scan%%2==0){
print("Numero par")
}else{
print("Numero impar")}
if (num%%2==0){
print("Numero par")
}else{
print("Numero impar")}
num = scan(nmax=1)
if (num%%2==0){
print("Numero par")
}else{
print("Numero impar")}
#Hacer ejercicio para saber si un numero es par o impar
num = scan(nmax=1)
if (num%%2==0){
print("Numero par")
}else{
print("Numero impar")}
x <- c(0.32,0.36,0.24,0.11,0.11,0.44,2.79,2.99,3.47,0.23,0.55,3.21,4.02,0.23)
sort(x)
Fn
x <- c(0.32,0.36,0.24,0.11,0.11,0.44,2.79,2.99,3.47,0.23,0.55,3.21,4.02,0.23)
sort(x)
Fn = ecdf(x)
Fn
Fn(1)
median(x)
quantile(x,probs=0.27)
quantile(x,probs=0.8)
if(4 > 3) {
"Verdadero"
} else {
"Falso"
if(4 > 3) {
print("Verdadero")
} else {
print("Falso")
}
if(4 > 3) {
print("Verdadero")
} else {
print("Falso")
}
# Ejemplo 2: Si se cumple la condiciÃ³n, se muestra "Verdadero"
if(4 > 3) {
print("Verdadero")
} else {
print("Falso")
}
print("Verdadero")
if(x>0) {
"el nÃºmero, es positivo"
} else if (x<0) {
"el nÃºmero, es negativo"
} else {
"el nÃºmero, es nulo"
}
x <- 5 # al objeto x le asigno el valor 5
if(x>0) {
"el nÃºmero, es positivo"
} else if (x<0) {
"el nÃºmero, es negativo"
} else {
"el nÃºmero, es nulo"
}
numero = 10
if (numero %% 2 == 0){
print("El numero es par") # me devuelve el mensaje
}else{
print("El numero es impar") # me devuelve el mensaje
}
print("Hola")
numero = 121
if (numero %% 2 == 0){
print("El numero es par") # me devuelve el mensaje
}else{
print("El numero es impar") # me devuelve el mensaje
}
numero = 10
if (numero %% 2 == 0){
print("El numero es par") # me devuelve el mensaje
}else{
print("El numero es impar") # me devuelve el mensaje
}
if(4 > 3) {
print("Verdadero")
} else {
print("Falso")
}
promedio <- function(x){mean(x)}
promedio(c(6,7,8,9,8))
resultado <- function(num){
if(num%%2==0){
print("El numero ",num," es par")
}else{
print("El numero ",num," es impar")
}
}
resultado(10)
resultado <- function(num){
if(num%%2==0){
print(paste("El numero ",num," es par"))
}else{
print(paste("El numero ",num," es impar"))
}
}
resultado(10)
promedio <- function(calificaciones) {
media <- mean(calificaciones)
texto <- paste0("CalificaciÃ³n: ", media, ", ")
if(media >= 6) {
print(paste0(texto, "aprobado"))
} else {
print(paste0(texto, "reprobado"))
}
}
promedio(c(6, 7, 8, 9, 8))
dado <- 1:6
for(cara in dado) {
dado ^ 2
dado <- 1:6
for(cara in dado) {
dado ^ 2
}
dado <- 1:6
for(cara in dado) {
dado ^ 2
}
dado <- 1:6
for(cara in dado) {
print(dado ^ 2)
}
dado <- 1:6
for(cara in dado) {
sqrtdado <- dado ^ 2
}
print(sqrtdado)
valor <-  0
mi_vector <- NULL
repeat{
valor <- valor + 1
if(valor == 5) {
break
}
}
valor
valor <-  0
mi_vector <- NULL
repeat{
valor <- valor + 1
print(valor)
if(valor == 5) {
break
}
}
valor
fh1 <- as.Date("1914/07/28",format="%y/%m/%d")
fh1
fh1 <- as.Date("1914/07/28")
fh1
fh2 <- ad.Date("1918/11/11")
as.character(fh1,format="%A")
as.character(fh2,format="%A")
fh2 <- ad.Date("1918/11/11")
as.character(fh2,format="%A")
fh2 <- ad.Date("1918/11/11")
fh1 <- as.Date("1914/07/28")
fh2 <- as.Date("1918/11/11")
as.character(fh1,format="%A")
as.character(fh2,format="%A")
difftime(fh2,fh1,units = "days")
difftime(fh2,fh1,units="weeks")
birth <- as.Date("1992-10-05")
actual <- Sys.Date()
Edad_calc <- actual - birth
Edad_calc
Edad_calc <-difftime(actual,birth,units="days")/365
Edad_calc
setwd("D:/DataScience/Data Science - Curso/R")
rm(list=ls())# Borrar los datos de entorno cargados en memoria
# H0= 500 gr
contenido <- c(510, 492, 494, 498, 492,496, 502, 491, 507, 496)
t.test(contenido, alternative='two.sided',
conf.level=0.95, mu=500)
t.test(contenido, alternative='two.sided',
conf.level=0.99, mu=500)
t.test(contenido, alternative='two.sided',
conf.level=0.999, mu=500)
# H0= 500 gr
contenido <- c(510, 492, 494, 498, 492,496, 502, 491, 507, 496)
t.test(contenido, alternative='two.sided',
conf.level=0.999, mu=500)
colesterol<- c(203, 229, 215, 220, 223, 233, 208, 228, 209)
t.test(colesterol,mu=220,alternative="two.sided",conf.level=0.95)
colesterol<- c(203, 229, 215, 220, 223, 233, 208, 228, 209,1090)
t.test(colesterol,mu=220,alternative="two.sided",conf.level=0.95)
# comparacion de varianzas--------------
T1 <- c(76, 85, 74,78, 82, 75, 82)
T2 <- c(57, 67, 55, 64, 61, 63, 63)
q1 <- qqnorm(T1, plot.it=TRUE)
q2 <- qqnorm(T2, plot.it=TRUE)
plot(range(q1$x, q2$x), range(q1$y, q2$y), type="n", las=1,
xlab='cuantiles teÃ³ricos', ylab='cuantiles de muestra')
points(q1, pch=19)
points(q2, col="red", pch=19)
qqline(T2, col="red", lty="dashed")
qqline(T1, lty='dashed')
legend('topleft', legend=c('T1', 'T2'), bty='n',
col=c('black', 'red'), pch=19)
var.test(T1, T2, null.value=1, alternative="two.sided",
conf.level=0.95)
urbana <- c(3, 7, 25, 10, 15, 6, 12, 25, 15, 7)
rural <- c(48, 44, 40, 38, 33, 21, 20, 12, 1, 18)
q1 <- qqnorm(urbana, plot.it=FALSE)
q2 <- qqnorm(rural, plot.it=FALSE)
plot(range(q1$x, q2$x), range(q1$y, q2$y), type="n", las=1,
xlab='cuantiles teÃ³ricos', ylab='cuantiles de muestra')
points(q1, pch=19)
points(q2, col="red", pch=19)
qqline(urbana, lty='dashed')
qqline(rural, col="red", lty="dashed")
legend('topleft', legend=c('urb', 'rur'), bty='n',
col=c('black', 'red'), pch=19)
var.test(urbana, rural, null.value=1, alternative="two.sided",
conf.level=0.95)
datos <- data.frame(Concentracion=c(urbana, rural),
Zona=rep(c('Urbana', 'Rural'), each=10))
View(datos)
str(datos)
boxplot(Concentracion ~ Zona, data=datos, las=1,
xlab='Zona', ylab='ConcentraciÃ³n arsÃ©nico (ppb)')
t.test(x=urbana, y=rural, alternative="two.sided", mu=0,
paired=FALSE, var.equal=FALSE, conf.level=0.95)
