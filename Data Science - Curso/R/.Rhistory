2+2
1
2
3
4
5
6
1000!
10*100000
3*5
#Primer clase de Programacion I#
#Comentario con numeral
3*5
3*10
#Primer clase de Programacion I#
#Comentario con numeral
3*5
3*10
#Primer clase de Programacion I#
#Comentario con numeral
3*5
numero<-24
vector<-c(2,5,7,9)
vector_2<-c("Ana P.","Lucas J.")
vector_2<-c("Ana P.","Lucas J.")
vector
vector_2
vector
vector_2
vector*10
vector[3]*2
vector[3]
vector_2[3]
vector_2[3]
vector<-c(2,5,7,9)
vector_2<-c("Ana P.","Lucas J.")
vector_2[3]
vector[3]
clas(vector[3])
class(vector[3])
class(vector_2)
class(vector_2[1])
vec
vec <- seq(from=1,to=100,by=2)
vec
length(vec)
names(familia)
milista <-list(numeros=1:5,
ciudades=c("Buenos Aires",
"Neuquen"))
familia <- list(padre="Juan",
madre="Maria",
numero.hijos=2,
nombre.hijos=c("Luis","Carlos"),
edades.hijos=c(7,5),
ciudad="La Plata")
names(familia)
path <-getwd()
print(path)
setwd(path)
# siempre comienza la sesion limpiando los paneles
rm(list=ls())# Borrar los datos de entorno cargados en memoria
install.packages("tidyverse")
library(tidyverse)
tidyverse_packages()
mi_csv<-read.table("mydata.csv",header=True,dec=".")
print(head(mi_csv))
#Importación de datos ----
#read.table()
#read.csv()
#read.csv2()
mi_csv<-read.table("mydata.csv",header=TRUE,dec=".")
setwd(path)
path <-getwd()
setwd(path)
#Importación de datos ----
#read.table()
#read.csv()
#read.csv2()
mi_csv<-read.table("mydata.csv",header=TRUE,dec=".")
setwd(getwd())
#Importación de datos ----
#read.table()
#read.csv()
#read.csv2()
mi_csv<-read.table("mydata.csv",header=TRUE,dec=".")
path = getwd()
print(path)
setwd(path)
#Importación de datos ----
#read.table()
#read.csv()
#read.csv2()
mi_csv<-read.table("mydata.csv",header=TRUE,dec=".")
setwd("C:/Users/Nacho/Documents")
#Importación de datos ----
#read.table()
#read.csv()
#read.csv2()
mi_csv<-read.table("mydata.csv",header=TRUE,dec=".")
print(head(mi_csv))
#Importación de datos ----
#read.table()
#read.csv()
#read.csv2()
mi_csv<-read.table("C:\Code\DataScience\Data Science - Curso\R\Clase 4\mydata.csv",header=TRUE,dec=".")
#Importación de datos ----
#read.table()
#read.csv()
#read.csv2()
mi_csv<-read.table("C:\Code\DataScience\Data Science - Curso\R\Clase 4\mydata.csv",header=TRUE,dec=".")
#Importación de datos ----
#read.table()
#read.csv()
#read.csv2()
mi_csv<-read.table("C:/Code/DataScience/Data Science - Curso/R/Clase 4/mydata.csv",header=TRUE,dec=".")
print(head(mi_csv))
View(mi_csv)
library(readxl)
#read_excel()
#read_xls()
#read_xlxs()
mi_excel <- read_excel("C:/Code/DataScience/Data Science - Curso/R/Clase 4/mydata.xlsx",col_names=TRUE)
print("Excel",head(mi_excel))
#install.packages("readxl")
library(readxl)
#read_excel()
#read_xls()
#read_xlxs()
mi_excel <- read_excel("C:/Code/DataScience/Data Science - Curso/R/Clase 4/mydata.xlsx",col_names=TRUE)
print("Excel",head(mi_excel))
#read_excel()
#read_xls()
#read_xlxs()
mi_excel <- read_excel("C:/Code/DataScience/Data Science - Curso/R/Clase 4/mydata.xlsx",col_names=TRUE)
print(head(mi_excel))
names(mi_excel)
#write.table(mi_csv,file="mi_csv.csv",row.names=False,sep=',')
str(mi_excel)
setwd("C:/Code/DataScience/Data Science - Curso/R")
getwd
getwd()
library(dplyr)
library(GGally)
library(lmtest)
library(car)
library(GGally)
library(lmtest)
library(car)
# Usamos el dataset mtcars ya incluido en R
datos <- mtcars
# Nombre de las columnas
names(datos)
# Eliminamos variables que no son útiles para el ejercicio (que no son contínuas)
datos <- select(datos, -c(am, vs, cyl, gear, carb))
str(datos)
ggpairs(datos, lower = list(continuous = "smooth"),
diag = list(continuous = "bar"), axisLabels = "none")
plot(mtcars$mpg,mtcars$wt)
plot(mtcars$qsec,mtcars$hp)
plot(mtcars$mpg,mtcars$hp)
library(dplyr)
library(GGally)
library(lmtest)
library(car)
#Buscamos datasets para practicar --> ?data()
#Cargamos el dataset
titanic <- read.csv("./titanic/train.csv",)
getwd()
#Buscamos datasets para practicar --> ?data()
#Cargamos el dataset
titanic <- read.csv("Clase4/titanic/train.csv")
#Buscamos datasets para practicar --> ?data()
#Cargamos el dataset
titanic <- read.csv("./Clase4/titanic/train.csv")
#Buscamos datasets para practicar --> ?data()
#Cargamos el dataset
titanic <- read.csv("./Clase 4/titanic/train.csv")
str(titanic)
names(titanic)#Nombre de las columnas
length(titanic)#Cantidad de columnas
head(titanic,n=1L)#Primeros 6L
dim(titanic)#dimension del dataset
length(names(titanic))
is.na(titanic)
sum(is.na(titanic))#Cantidad de valores NUll/na del dataset
which(is.na(titanic$Age)==TRUE)
age_mean <- mean(titanic$Age,na.rm = TRUE)
age_mean
summary(titanic)#sumario del dataset
sapply(titanic,class)
#Transformamos el tipo de dato de las columnas Survived y Sex para que sean un factor
titanic$Survived <- as.factor(titanic$Survived)
class(titanic$Survived)
titanic$Sex <- as.factor(titanic$Sex)
class(titanic$Sex)
titanic$Embarked <- as.factor(titanic$Embarked)
class(titanic$Embarked)
titanic$Pclass <- as.factor(titanic$Pclass)
class(titanic$Pclass)
#Buscamos na y completamos el dataset por c/columna
sum(is.na(titanic$Sex))
sum(is.na(titanic$Age)) # Este tiene 177 na
sum(is.na(titanic$Embarked))
sum(is.na(titanic$Survived))
sum(is.na(titanic$Cabin))
sum(is.na(titanic$Ticket))
sum(is.na(titanic$Sex))
#Asignamos valor promedio de Age donde existan na valores
titanic$Age[is.na(titanic$Age)] <- age_mean
sum(is.na(titanic$Age))
titanic$Age
sum(is.na(titanic))# Ahora el dataset está completo
#Hacemos análisis exploratorio mediante gráficas
library(ggplot2)
library(patchwork)
a <- ggplot(titanic)
bar_sex<-a+geom_bar(aes(Sex))
bar_survived <- a+geom_bar(aes(Survived))
hist_age <- a+geom_histogram(aes(Age))
bar_sex/bar_survived/hist_age
a+geom_histogram(aes(titanic$Fare))
View(titanic)
table_titanic <- titanic['Age','Fare']
table_titanic
?select()
datos_titanic <- select(titanic,c(Age,Fare))
datos_titanic
str(datos_titanic)
ggpairs(datos_titanic, lower = list(continuous = "smooth"),
diag = list(continuous = "bar"), axisLabels = "none")
plot(datos_titanic$Age,datos_titanic$Fare)
cor(datos_titanic$Age,datos_titanic$Fare)
cor.test(datos_titanic$Age,datos_titanic$Fare)
shapiro.test(datos_titanic$Age)
shapiro.test(datos_titanic$Fare)
modelolineal = lm(Age~Fare, data =datos_titanic)
summary(modelolineal)
unp <- read.csv("https://raw.githubusercontent.com/amankharwal/Website-data/master/unemployment.csv")
names(unp)
str(unp)
unp$Date <- as.Date(unp$Date)
##transform data
unp$Region <- as.factor(unp$Region)
unp$Frequency <- as.factor(unp$Frequency)
unp$Region.1 <- as.factor(unp$Region.1)
str(unp)
View(unp)
unp <- read.csv("https://raw.githubusercontent.com/amankharwal/Website-data/master/unemployment.csv")
View(unp)
##transform data
unp$Region <- as.factor(unp$Region)
unp$Date <- as.Date(unp$Date,format="%m-%d-%y")
unp$Frequency <- as.factor(unp$Frequency)
unp$Region.1 <- as.factor(unp$Region.1)
str(unp)
unp <- read.csv("https://raw.githubusercontent.com/amankharwal/Website-data/master/unemployment.csv")
names(unp)
str(unp)
##transform data
unp$Region <- as.factor(unp$Region)
unp$Date <- as.Date(unp$Date,format="%m/%d/%y")
unp$Frequency <- as.factor(unp$Frequency)
unp$Region.1 <- as.factor(unp$Region.1)
str(unp)
unp <- read.csv("https://raw.githubusercontent.com/amankharwal/Website-data/master/unemployment.csv")
names(unp)
str(unp)
##transform data
unp$Region <- as.factor(unp$Region)
unp$Date <- as.Date(unp$Date,format="%d-%m-%y")
unp$Frequency <- as.factor(unp$Frequency)
unp$Region.1 <- as.factor(unp$Region.1)
str(unp)
#EDA
a<-ggplot(data=unp)
a+geom_bar(aes(Region.1))
a+geom_bar(aes(Region))
a+geom_count(aes(Region))
a+geom_count(aes(Region,longitud))
a+geom_count(aes(Region,longitude))
a+geom_count(aes(Region.1,longitude))
data_unp <- select(unp,-c(Region,Date,Frequency,Region.1))
ggpairs(data_unp, lower = list(continuous = "smooth"),
diag = list(continuous = "bar"), axisLabels = "none")
#Modelo regresion
plot(unp$latitude,unp$Estimated.Labour.Participation.Rate....)
shapiro.test(unp$latitude)
shapiro.test(unp$Estimated.Labour.Participation.Rate....)
cor.test(unp$latitude,unp$Estimated.Labour.Participation.Rate....,method = "Spearman")
cor.test(unp$latitude,unp$Estimated.Labour.Participation.Rate....,method = "spearman")
cor.test(unp$latitude,unp$Estimated.Labour.Participation.Rate....)
modelo <- lm(unp$latitude,unp$Estimated.Labour.Participation.Rate....,data=unp)
summarise(modelo)
modelolineal = lm(unp$latitude,unp$Estimated.Labour.Participation.Rate....,data=unp)
modelolineal = lm(unp$latitude~unp$Estimated.Labour.Participation.Rate....,data=unp)
summarise(modelo)
summary(modelo)
summary(modelolineal)
