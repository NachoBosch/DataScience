print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")
}
num = scan()
print("Numero par")
}else{
print("Numero impar")}
#Hacer ejercicio para saber si un numero es par o impar
num = scan()
num = scan(?)
#Hacer ejercicio para saber si un numero es par o impar
num = scan(nmax=1)
if (scan%%2==0){
print("Numero par")
}else{
print("Numero impar")}
if (num%%2==0){
print("Numero par")
}else{
print("Numero impar")}
num = scan(nmax=1)
if (num%%2==0){
print("Numero par")
}else{
print("Numero impar")}
#Hacer ejercicio para saber si un numero es par o impar
num = scan(nmax=1)
if (num%%2==0){
print("Numero par")
}else{
print("Numero impar")}
x <- c(0.32,0.36,0.24,0.11,0.11,0.44,2.79,2.99,3.47,0.23,0.55,3.21,4.02,0.23)
sort(x)
Fn
x <- c(0.32,0.36,0.24,0.11,0.11,0.44,2.79,2.99,3.47,0.23,0.55,3.21,4.02,0.23)
sort(x)
Fn = ecdf(x)
Fn
Fn(1)
median(x)
quantile(x,probs=0.27)
quantile(x,probs=0.8)
if(4 > 3) {
"Verdadero"
} else {
"Falso"
if(4 > 3) {
print("Verdadero")
} else {
print("Falso")
}
if(4 > 3) {
print("Verdadero")
} else {
print("Falso")
}
# Ejemplo 2: Si se cumple la condiciÃ³n, se muestra "Verdadero"
if(4 > 3) {
print("Verdadero")
} else {
print("Falso")
}
print("Verdadero")
if(x>0) {
"el nÃºmero, es positivo"
} else if (x<0) {
"el nÃºmero, es negativo"
} else {
"el nÃºmero, es nulo"
}
x <- 5 # al objeto x le asigno el valor 5
if(x>0) {
"el nÃºmero, es positivo"
} else if (x<0) {
"el nÃºmero, es negativo"
} else {
"el nÃºmero, es nulo"
}
numero = 10
if (numero %% 2 == 0){
print("El numero es par") # me devuelve el mensaje
}else{
print("El numero es impar") # me devuelve el mensaje
}
print("Hola")
numero = 121
if (numero %% 2 == 0){
print("El numero es par") # me devuelve el mensaje
}else{
print("El numero es impar") # me devuelve el mensaje
}
numero = 10
if (numero %% 2 == 0){
print("El numero es par") # me devuelve el mensaje
}else{
print("El numero es impar") # me devuelve el mensaje
}
if(4 > 3) {
print("Verdadero")
} else {
print("Falso")
}
promedio <- function(x){mean(x)}
promedio(c(6,7,8,9,8))
resultado <- function(num){
if(num%%2==0){
print("El numero ",num," es par")
}else{
print("El numero ",num," es impar")
}
}
resultado(10)
resultado <- function(num){
if(num%%2==0){
print(paste("El numero ",num," es par"))
}else{
print(paste("El numero ",num," es impar"))
}
}
resultado(10)
promedio <- function(calificaciones) {
media <- mean(calificaciones)
texto <- paste0("CalificaciÃ³n: ", media, ", ")
if(media >= 6) {
print(paste0(texto, "aprobado"))
} else {
print(paste0(texto, "reprobado"))
}
}
promedio(c(6, 7, 8, 9, 8))
dado <- 1:6
for(cara in dado) {
dado ^ 2
dado <- 1:6
for(cara in dado) {
dado ^ 2
}
dado <- 1:6
for(cara in dado) {
dado ^ 2
}
dado <- 1:6
for(cara in dado) {
print(dado ^ 2)
}
dado <- 1:6
for(cara in dado) {
sqrtdado <- dado ^ 2
}
print(sqrtdado)
valor <-  0
mi_vector <- NULL
repeat{
valor <- valor + 1
if(valor == 5) {
break
}
}
valor
valor <-  0
mi_vector <- NULL
repeat{
valor <- valor + 1
print(valor)
if(valor == 5) {
break
}
}
valor
fh1 <- as.Date("1914/07/28",format="%y/%m/%d")
fh1
fh1 <- as.Date("1914/07/28")
fh1
fh2 <- ad.Date("1918/11/11")
as.character(fh1,format="%A")
as.character(fh2,format="%A")
fh2 <- ad.Date("1918/11/11")
as.character(fh2,format="%A")
fh2 <- ad.Date("1918/11/11")
fh1 <- as.Date("1914/07/28")
fh2 <- as.Date("1918/11/11")
as.character(fh1,format="%A")
as.character(fh2,format="%A")
difftime(fh2,fh1,units = "days")
difftime(fh2,fh1,units="weeks")
birth <- as.Date("1992-10-05")
actual <- Sys.Date()
Edad_calc <- actual - birth
Edad_calc
Edad_calc <-difftime(actual,birth,units="days")/365
Edad_calc
library(ggplot)
library(ggplot2)
?hist
data()
#Histogramas. hist()
data("ToothGrowth")
str(ToothGrowth)
#Histogramas. hist()
data("ToothGrowth")?
str(ToothGrowth)
View(ToothGrowth)
names(ToothGrowth)
names(ToothGrowth$supp)
length(ToothGrowth$supp)
len(ToothGrowth)
str(ToothGrowth&supp)
summary(ToothGrowth&supp)
summary(ToothGrowth)
describe(ToothGrowth)
class(ToothGrowth&supp)
class(ToothGrowth)
hist(ToothGrowth$len)
hist(ToothGrowth$len,
breaks=20)
hist(ToothGrowth$len,
breaks=2)
hist(ToothGrowth$len,
breaks=10,
freq=F)
hist(ToothGrowth$len,
breaks=15,
freq=T)
hist(ToothGrowth$len,
breaks=15,
freq=T,
col="blue")
hist(ToothGrowth$len,
breaks=15,
freq=T,
col="#000000")
hist(ToothGrowth$len,
breaks=15,
freq=T,
col="#FFFFFF")
hist(ToothGrowth$len,
breaks=15,
freq=T,
col="#306E82")
hist(ToothGrowth$len,
breaks=15,
freq=T,
col="#306E92")
hist(ToothGrowth$len,
breaks=15,
freq=T,
col="#308E62")
hist(ToothGrowth$len,
breaks=15,
freq=T,
col="#308E62",
border='white')
hist(ToothGrowth$len,
breaks=15,
freq=T,
col="#308E62",
border='orange')
hist(ToothGrowth$len,
breaks=15,
freq=T,
col="#308E62",
border='orange',
main="Histograma de crecimiento de dientes")
#ggplot(x) nos permite crear un "lienzo en blanco" donde se irá armando la imagen
library(ggplot2)
rm(ToothGrowth)
data(iris)
str(iris)
levels(iris$Species)
View(iris)
view(iris$Species)
View(iris$Species)
ggplot(iris)
a<-ggplot(iris)
a+geom_histogram(aes(Sepal.Length))
a+geom_histogram(aes(Sepal.Length),
binwidth=0.5)
a+geom_histogram(aes(Sepal.Length),
binwidth=0.1)
a+geom_histogram(aes(Sepal.Length),
Species=colors(),
binwidth=0.1)
a+geom_histogram(aes(Sepal.Length),
colors()=Species,
binwidth=0.1)
a+geom_histogram(aes(Sepal.Length),
colors=Species,
binwidth=0.1)
a+geom_histogram(aes(Sepal.Length),
color=Species,
binwidth=0.1)
geom_histogram()?
a+geom_histogram(aes(Sepal.Length),
color=Species,
binwidth=0.1)?
a+geom_histogram(aes(Sepal.Length),
col=Species,
binwidth=0.1)?
a+geom_bar(aes(Species))
a<-ggplot(iris)
a+geom_histogram(aes(Sepal.Length),
binwidth=0.1)
a+geom_bar(aes(Species))
a+geom_point(aes(Sepal.Length,Sepal.Length))
a+geom_point(aes(Sepal.Length,Sepal.Width))
a+geom_bar(aes(Species,Petal.Length))
a+geom_bar(aes(Species,Petal.Length),stat='identity')
View(iris)
a+geom_boxplot(aes(Species,Petal.Length))
a+geom_point(aes(Sepal.Length,Sepal.Width,color=Species))
a+geom_point(aes(Petal.Length,Petal.Width,color=Species))
a+geom_point(aes(Petal.Length,Petal.Width,fill=Species))
a+geom_point(aes(Petal.Length,Petal.Width,shape=Species))
a+geom_point(aes(Petal.Length,Petal.Width,
shape=Species,
color=Species))
a+geom_point(aes(Petal.Length,Petal.Width,
shape=Species,
color=Species))+
scale_color_manual(values=c('red','yellow','purple'))
a+geom_point(aes(Petal.Length,Petal.Width))+
scale_color_manual(values=c('red','yellow','purple'))
a+geom_point(aes(Petal.Length,Petal.Width))+scale_color_manual(values=c('red','yellow','purple'))
a+geom_point(aes(Petal.Length,Petal.Width,
color=Species))+
scale_color_manual(values=c('red','yellow','purple'))
a+geom_point(aes(Petal.Length,Petal.Width,
color=Species,
size=Species))+
scale_color_manual(values=c('red','yellow','purple'))
a+geom_point(aes(Petal.Length,Petal.Width,
color=Species))+
scale_color_manual(values=c('red','yellow','purple'))
a+geom_point(aes(Petal.Length,Petal.Width,
color=Species))+
scale_color_manual(values=c('red','gray','purple'))
a+geom_point(aes(Petal.Length,Petal.Width,
color=Species))+
scale_color_manual(values=c('red','gray','purple'))+
scale_shape_manual(values=c(19,6,8))
a+geom_point(aes(Petal.Length,Petal.Width,
color=Species,
shape=Species))+
scale_color_manual(values=c('red','gray','purple'))+
scale_shape_manual(values=c(19,6,8))
a+geom_point(aes(Petal.Length,Petal.Width,
color=Species,
shape=Species))+
scale_color_manual(values=c('red','orange','purple'))+
scale_shape_manual(values=c(19,6,8))
?geom_point
a+geom_point(aes(Petal.Length,Petal.Width,
color=Species,
shape=Species))+
scale_color_manual(values=c('red','orange','purple'))+
scale_shape_manual(values=c(19))
boxplot(iris$Petal.Length ~ iris$Species)
?boxplot
cafe <- c(510,492,494,498,492,496,502,491,507,496)
#Ejercicio para la varianza poblacional de dos muestras
t1<-c(76,85,74,78,82,75,82)
t2<-c(57,67,55,64,61,63,63)
q1<-qqnorm(t1,plot.it=F)
q2<-qqnorm(t2,plot.it=F)
plot(range(q1$x,q2$x),range(q1$y,q2$y),type="n",las=1,
xlab='Cuantiles teóricos',ylab='Cuantiles de muestra')
points(q1,pch=19)
points(q2,col='red',pch=19)
qqline(t1,lty='dashed')
qqline(t2,col="red",lty='dashed')
legend('topleft',legend=c('t1','t2'),
bty='n',col=c('black','red'),pcg=19)
legend('topleft',legend=c('t1','t2'),
bty='n',col=c('black','red'),pch=19)
#Al observar los puntos bastante alineados nos hace pensar que las muestras provienen de una población normal
var.test(t1,t2,null.value=1,alternative="two.sided",
conf.level=0.95)
?var.test
var.t1
var(t1)
var(t2)
#Ejercicio para dos varianzas muestrales
ur<-c(3,7,25,10,15,6,12,15,7)
ru<-c(48,44,40,38,33,21,20,12,1,18)
length(ur)
length(ru)
#Ejercicio para dos varianzas muestrales
ur<-c(3,7,25,10,15,6,12,25,15,7)
ru<-c(48,44,40,38,33,21,20,12,1,18)
length(ur)
length(ru)
var(ur)
var(ru)
q1<-qqnorm(ur,plot.it = F)
q1
q2<-qqnorm(ru,plot.it = F)
plot(range(q1$x,q2$x),range(q1$y,q2$y),type="n",las=1,
xlab='Cuantiles teóricos',ylab='Cuantiles de muestra')
points(q1,pch=19)
points(q2,col='red',pch=19)
qqline(t1,lty='dashed')
qqline(t2,col="red",lty='dashed')
legend('topleft',legend=c('t1','t2'),
bty='n',col=c('black','red'),pch=19)
qqline(ur,lty='dashed')
qqline(ru,col="red",lty='dashed')
legend('topleft',legend=c('ur','ru'),
bty='n',col=c('black','red'),pch=19)
var.test(ur,ru,null.value=1,alternative="two.sided",
conf.level=0.95)
datos<-data.frame(tiempo=c(t1,t2),trat=rep(1:2,each=7))
datos
boxplot(tiempo~trat,data=datos,las=1,
xlab='Tratamiento',ylab='Tiempo (min)')
t.test(t1,t2,alternative="two.sided",mu=0,var.equal = T,
conf.level =0.97 )
#Ejercicio de diferencia de muestras p/varianzas diferentes
datos<-data.frame(Concentracion=c(ur,ru),
Zona=rep(c('Urbana','Rural'),each=10))
datos
boxplot(Concentracion~Zona,data=datos,las=1,
xlab='Zona',ylab='Concentracion Arsenico(ppb)')
mean(ur)
men(ru)
mean(ru)
t.test(ur,ru,alternative="two.sided",mu=0,
paired=False,var.equal=F,conf.level=0.95)
t.test(ur,ru,alternative="two.sided",mu=0,
paired=F,var.equal=F,conf.level=0.95)
datos <- read.table("mydata.csv",header=T,sep=",",dec=".")
range(datos$EDAD)
datos <- read.table("mydata.csv",header=T,sep=",",dec=".")
getwd()
setwd("D:/DataScience/Data Science - Curso/R/Clase 7")
datos <- read.table("mydata.csv",header=T,sep=",",dec=".")
range(datos$EDAD)
datos$GRUPO<-cut(datos$EDAD,breaks=seq(20,35,by=3),include.lowest = T)
datos$GRUPO
#Correlacion y covarianza
cov(datos&PESO,datos$EDAD)
#Correlacion y covarianza
cov(datos$PESO,datos$EDAD)
#creamos tablas de comparacion entre var.cualitativasy cuantitativas
datos$PESO <- as.numeric(as.factor(datos$PESO))
#Correlacion y covarianza
cov(datos$PESO,datos$EDAD)
datos <- read.table("mydata.csv",header=T,sep=",",dec=".")
cor(datos$PESO,datos$EDAD)
#creamos tablas de comparacion entre var.cualitativasy cuantitativas
datos$PESO <- as.numeric(as.factor(datos$PESO))
cor(datos$PESO,datos$EDAD)
#Correlacion y covarianza
cov(datos$PESO,datos$EDAD)
cov(datos$EDAD,datos$PESO)
cor(datos$PESO,datos$EDAD)
#Ejercicio de test de correlacion con coeficiente de Pearson
cor.test(datos$PESO,datos$EDAD)
#Ejercicio con tabla3 de datos de hematocritos, viscosidad de la sangre y cantidad de proteínas.
tabla3<-read_excel("Tabla3.xlsx")
#Ejercicio con tabla3 de datos de hematocritos, viscosidad de la sangre y cantidad de proteínas.
library(readxl)
tabla3<-read_excel("Tabla3.xlsx")
tabla3
str(tabla3)
summary(tabla3)
#Evaluamos normalidad para cada variable
shapiro.test(tabla3$hto)
shapiro.test(tabla3$visc)
shapiro.test(tabla3$proteínas)
#Evaluamos correlacion para las variables: hto y visc
cor.test(tabla3$hto,tabla3$visc)
#Evaluamos correlacion para las variables: proteínas y visc
cor.test(tabla3$proteínas,tabla3$visc)
librospersona<-rnorm(2000,5,2)
librospersona
librospersona[librospersona<0]<-0
psu <- 200 + 20*librospersona + rnorm(2000,150,45)
plot(librospersona,psu)
abline(lm(psu~librospersona),col='red')
shapiro.test(librospersona)
shapiro.test(psu)
shapiro.test(librospersona)
cor.test(librospersona,psu)
